CREATE SCHEMA IF NOT EXISTS learning_platform;


CREATE TABLE IF NOT EXISTS learning_platform.users (
    id SERIAL PRIMARY KEY,
        full_name VARCHAR(50) NOT NULL,
        email VARCHAR(50) NOT NULL UNIQUE,
        avatar_url VARCHAR(100),
        role VARCHAR(12) DEFAULT 'Student'::character varying,
        email_verification_token VARCHAR(255),
        email_token_expires_at TIMESTAMP,
        password_reset_token VARCHAR(255),
        password_reset_token_expires_at TIMESTAMP,
        email_verified BOOLEAN DEFAULT false
);


CREATE TABLE IF NOT EXISTS learning_platform.password_hash (
    user_id INTEGER,
    hash VARCHAR(350) NOT NULL,
    salt VARCHAR(180) NOT NULL,
    algorithm VARCHAR(12) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES learning_platform.users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS learning_platform.courses
(
    id          SERIAL PRIMARY KEY,
    title       VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    course_img_url VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS learning_platform.lessons
(
    id         SERIAL PRIMARY KEY,
    title      VARCHAR(255) NOT NULL,
    content    TEXT NOT NULL,
    course_id  INTEGER NOT NULL,
    FOREIGN KEY (course_id) REFERENCES learning_platform.courses (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS learning_platform.lesson_pictures
(
    id         SERIAL PRIMARY KEY,
    img_url    VARCHAR(255) NOT NULL,
    lesson_id  INTEGER NOT NULL,
    FOREIGN KEY (lesson_id) REFERENCES learning_platform.lessons (id) ON DELETE CASCADE,
    UNIQUE (lesson_id, img_url)
);

CREATE TABLE IF NOT EXISTS learning_platform.lesson_videos
(
    id         SERIAL PRIMARY KEY,
    video_url  VARCHAR(255) NOT NULL,
    lesson_id  INTEGER NOT NULL,
    FOREIGN KEY (lesson_id) REFERENCES learning_platform.lessons (id) ON DELETE CASCADE,
    UNIQUE (lesson_id, video_url)
);


-- Create a new schema
create schema if not exists blog_schema;

-- Create User table
create table if not exists blog_schema.users (
    id serial primary key,
    full_name varchar(255) not null,
    email varchar(255) not null,
    role varchar(50) not null
);

-- Create Category table
create table if not exists blog_schema.category (
    id serial primary key,
    name varchar(255) not null
);

-- Create Blog table
create table if not exists blog_schema.blog (
    id serial primary key,
    user_id int not null,
    title varchar(255) not null,
    content text,
    publication_date timestamp not null,
    category_id int not null,
    featured_image varchar(255),
    constraint fk_user foreign key (user_id) references blog_schema.user (id) on delete cascade,
    constraint fk_category foreign key (category_id) references blog_schema.category (id) on delete cascade
);

-- Create Comment table
create table if not exists blog_schema.comment (
    id serial primary key,
    blog_id int not null,
    user_id int not null,
    text text not null,
    publication_date timestamp not null,
    constraint fk_blog_comment foreign key (blog_id) references blog_schema.blog (id) on delete cascade,
    constraint fk_user_comment foreign key (user_id) references blog_schema.user (id) on delete cascade
);
